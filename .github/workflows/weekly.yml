name: Weekly Content Generation and Deploy

on:
  schedule:
    # Draait elke maandag om 08:00 UTC
    - cron: '0 8 * * 1'
  workflow_dispatch:
    inputs:
      skip_website_deploy:
        description: 'Sla de publicatie naar GitHub Pages over.'
        required: false
        type: boolean
        default: false
      skip_social_publish:
        description: 'Sla de publicatie naar sociale media over.'
        required: false
        type: boolean
        default: false

jobs:
  # JOB 1: Genereer alle content en data bestanden
  generate-content:
    runs-on: ubuntu-latest
    outputs:
      # Maak de status van content generatie beschikbaar voor andere jobs
      content_generated: ${{ steps.commit.outputs.changes_detected }}
    permissions:
      contents: write 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Content Generation Pipeline
        env:
          SITE_BASE_URL: "https://profdrkdc.github.io/Vegan-BioTech-Report/"
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          python3 -m src.run_pipeline

      - name: Commit and Push Generated Content
        id: commit
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add content/ raw.json curated.json social_posts.json longread_outline.json published_post_url.txt
          if ! git diff --staged --quiet; then
            git commit -m "feat(content): Add generated content from workflow run"
            git push
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          else
            echo "No changes to commit."
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          fi

  # JOB 2: Bouw en publiceer de website naar GitHub Pages
  deploy-website:
    runs-on: ubuntu-latest
    needs: generate-content
    if: needs.generate-content.outputs.content_generated == 'true' && github.event.inputs.skip_website_deploy != 'true'
    permissions:
      contents: write 
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      - name: Build website
        run: hugo --minify

      # --- NIEUWE DEBUG-STAP ---
      - name: Upload generated site for debugging
        uses: actions/upload-artifact@v4
        with:
          name: github-pages-build
          path: ./public
        if: always()

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public 
          commit_message: "docs(deploy): Deploy latest content to GitHub Pages"

  # JOB 3: Publiceer naar sociale media nadat de site live is
  publish-social:
    runs-on: ubuntu-latest
    needs: deploy-website
    # Draai deze job alleen als de vorige jobs succesvol waren en de gebruiker dit niet expliciet overslaat
    if: success() && github.event.inputs.skip_social_publish != 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Publish to Social Media
        env:
          # AI Provider voor Flair Selectie
          AI_API_TYPE: "google" # Primaire provider voor deze simpele taak
          AI_MODEL_ID: "gemini-1.5-flash-latest" 
          AI_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          
          # Social Media Keys
          MASTODON_ACCESS_TOKEN: ${{ secrets.MASTODON_ACCESS_TOKEN }}
          MASTODON_API_BASE_URL: ${{ secrets.MASTODON_API_BASE_URL }}
          REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          REDDIT_USERNAME: ${{ secrets.REDDIT_USERNAME }}
          REDDIT_PASSWORD: ${{ secrets.REDDIT_PASSWORD }}
          REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
        run: |
          python3 -m src.publish_social